(()=>{"use strict";const t=function(){function t(t){this.interval=1,this.options={cellsX:100,cellsY:100,cellSize:10,gridColor:"#3730a3",cellColor:"#ccc"},this.canvas=document.getElementById(t),this.ctx=this.canvas.getContext("2d");var i=Math.max(document.documentElement.clientWidth||0,window.innerWidth||0),o=Math.max(document.documentElement.clientHeight||0,window.innerHeight||0);console.log(i,o),this.options.cellsX=Math.floor(i/this.options.cellSize),this.options.cellsY=Math.floor(o/this.options.cellSize),console.log(this.options.cellsX),this.update()}return t.prototype.update=function(){var t=this;this.canvas.width=this.options.cellsX*this.options.cellSize,this.canvas.height=this.options.cellsY*this.options.cellSize,this.matrix=new Array(this.options.cellsX);for(var i=0;i<this.matrix.length;i++){this.matrix[i]=new Array(this.options.cellsY);for(var o=0;o<this.matrix[i].length;o++)this.matrix[i][o]=!1}this.randomize(),setInterval((function(){t.step(),t.draw()}),this.interval)},t.prototype.step=function(){var t,i,o=new Array(this.matrix.length);for(t=0;t<o.length;t++)o[t]=new Array(this.matrix[t].length);for(t=0;t<this.matrix.length;t++)for(i=0;i<this.matrix[t].length;i++){var s=this.countNeighbours(t,i);this.matrix[t][i]?(2!=s&&3!=s||(o[t][i]=!0),(s<2||s>3)&&(o[t][i]=!1)):3==s&&(o[t][i]=!0)}this.matrix=o},t.prototype.draw=function(){this.canvas.width=this.canvas.width,this.ctx.strokeStyle=this.options.gridColor,this.ctx.fillStyle=this.options.cellColor;for(var t=.5;t<this.options.cellsX*this.options.cellSize;t+=this.options.cellSize)this.ctx.moveTo(t,0),this.ctx.lineTo(t,this.options.cellsY*this.options.cellSize);for(var i=.5;i<this.options.cellsY*this.options.cellSize;i+=this.options.cellSize)this.ctx.moveTo(0,i),this.ctx.lineTo(this.options.cellsX*this.options.cellSize,i);for(this.ctx.stroke(),t=0;t<this.matrix.length;t++)for(i=0;i<this.matrix[t].length;i++)this.matrix[t][i]&&this.ctx.fillRect(t*this.options.cellSize+1,i*this.options.cellSize+1,this.options.cellSize-1,this.options.cellSize-1)},t.prototype.countNeighbours=function(t,i){for(var o=0,s=t-1;s<=t+1;s++)for(var e=i-1;e<=i+1;e++)s==t&&e==i||s<0||s>=this.matrix.length||e<0||e>=this.matrix[s].length||this.matrix[s][e]&&o++;return o},t.prototype.randomize=function(){for(var t=0;t<this.matrix.length;t++)for(var i=0;i<this.matrix[t].length;i++)this.matrix[t][i]=Math.random()<.3},t}();console.log("test"),new t("gol-canvas")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,